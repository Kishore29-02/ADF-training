{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-trainingkishore-001"
		},
		"ls_blob_inputservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blob_inputservice'"
		},
		"ls_sqldb_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_sqldb'"
		},
		"ls_sqldb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserver-trainingkishore-001.database.windows.net"
		},
		"ls_sqldb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb-trainingkishore-001"
		},
		"ls_sqldb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "dbadmin"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_dump_top_customers_to_db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get top purchasing customers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_order_netprice",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrderDetails": {
										"schema": "raw",
										"table": "orderdetails"
									},
									"Customerdetails": {
										"schema": "raw",
										"table": "customerdetails"
									},
									"Sink": {
										"schema": "raw",
										"table": "top_customers"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "practise"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-27T08:20:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_order_netprice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dump_into_database')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dump table into db",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_merge_destination_container",
								"type": "DatasetReference",
								"parameters": {
									"file_name": {
										"value": "@pipeline().parameters.source_file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"source_file_name": {
						"type": "string"
					},
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Question1/Staging Pipeline/Dump into database"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-27T05:00:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_merge_destination_container')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_merge_customerdetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Merge customer details",
						"description": "Merge customer details into single file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*customerdetails.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_source_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_merge_destination_container",
								"type": "DatasetReference",
								"parameters": {
									"file_name": {
										"value": "@pipeline().parameters.target_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Dump into customer details table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Merge customer details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dump_into_database",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"source_file_name": {
									"value": "@pipeline().parameters.target_file_name",
									"type": "Expression"
								},
								"schema_name": {
									"value": "@pipeline().parameters.schema_name",
									"type": "Expression"
								},
								"table_name": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"target_file_name": {
						"type": "string",
						"defaultValue": "temp_file"
					},
					"schema_name": {
						"type": "string",
						"defaultValue": "temp_schema"
					},
					"table_name": {
						"type": "string",
						"defaultValue": "temp_table"
					}
				},
				"folder": {
					"name": "Question1/Staging Pipeline/Customer details"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-27T05:00:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_source_customer')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_merge_destination_container')]",
				"[concat(variables('factoryId'), '/pipelines/pl_dump_into_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_merge_orderdetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Merge order details",
						"description": "Merge customer details into a single file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*orderdetails.xlsx",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_source_order",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_merge_destination_container",
								"type": "DatasetReference",
								"parameters": {
									"file_name": {
										"value": "@pipeline().parameters.target_file_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Merge order details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_dump_into_database",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"source_file_name": {
									"value": "@pipeline().parameters.target_file_name",
									"type": "Expression"
								},
								"schema_name": {
									"value": "@pipeline().parameters.schema_name",
									"type": "Expression"
								},
								"table_name": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"target_file_name": {
						"type": "string"
					},
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Question1/Staging Pipeline/order details"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-27T05:00:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_source_order')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_merge_destination_container')]",
				"[concat(variables('factoryId'), '/pipelines/pl_dump_into_database')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_prep_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CustomerDetailsMigration",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_customerdetails_to_prep",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customerdetailsstaging": {
										"schema": "staging",
										"table": "customer_details"
									},
									"customerdetailsprep": {
										"schema": "prep",
										"table": "customer_details"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "OrderDetailsMigration",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CustomerDetailsMigration",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_orderdetails_to_prep",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"orderdetailsstaging": {
										"schema": "staging",
										"table": "order_details"
									},
									"orderdetailsprep": {
										"schema": "prep",
										"table": "order_details"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Question1/Prep pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_customerdetails_to_prep')]",
				"[concat(variables('factoryId'), '/dataflows/df_orderdetails_to_prep')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_reporting')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "generateReport",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_final_report",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerDetailsPrep": {
										"schema": {
											"value": "@pipeline().parameters.source_schema",
											"type": "Expression"
										},
										"table": {
											"value": "@pipeline().parameters.source_customer_table",
											"type": "Expression"
										}
									},
									"OrderDetailsPerp": {
										"schema": {
											"value": "@pipeline().parameters.source_schema",
											"type": "Expression"
										},
										"table": {
											"value": "@pipeline().parameters.source_order_table",
											"type": "Expression"
										}
									},
									"GenerateReport": {
										"schema": {
											"value": "@pipeline().parameters.target_schema",
											"type": "Expression"
										},
										"table": {
											"value": "@pipeline().parameters.target_table",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"source_schema": {
						"type": "string",
						"defaultValue": "prep"
					},
					"source_order_table": {
						"type": "string",
						"defaultValue": "order_details"
					},
					"source_customer_table": {
						"type": "string",
						"defaultValue": "customer_details"
					},
					"target_schema": {
						"type": "string",
						"defaultValue": "report"
					},
					"target_table": {
						"type": "string",
						"defaultValue": "final_details"
					}
				},
				"folder": {
					"name": "Question1/Reporting pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_final_report')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_staging_dump')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_superstore",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference",
								"parameters": {
									"schema": "staging2",
									"table": "store"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Question2/Staging pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_superstore')]",
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_staging_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Merge customer details",
						"description": "executes merge pipelines",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_merge_customerdetails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"target_file_name": "customerdetails",
								"schema_name": "staging",
								"table_name": "customer_details"
							}
						}
					},
					{
						"name": "Merge order details",
						"description": "executes merge pipelines",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Merge customer details",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_merge_orderdetails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"target_file_name": "orderdetails",
								"schema_name": "staging",
								"table_name": "order_details"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Question1/Staging Pipeline"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-26T11:39:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_merge_customerdetails')]",
				"[concat(variables('factoryId'), '/pipelines/pl_merge_orderdetails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_merge_destination_container')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_inputservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Question1"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"container": "consolidated-folder"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_inputservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_source_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_inputservice",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Question1"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input-container-new"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "PhoneNumber",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "ZipCode",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_inputservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_source_order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_inputservice",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Question1"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input-container"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "ProductName",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "OrderTimestamp",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_inputservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_superstore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_inputservice",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Question2"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "240826 Superstore.xlsx",
						"container": "input-container-q2"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Row ID",
						"type": "String"
					},
					{
						"name": "Order ID",
						"type": "String"
					},
					{
						"name": "Order Date",
						"type": "String"
					},
					{
						"name": "Ship Date",
						"type": "String"
					},
					{
						"name": "Ship Mode",
						"type": "String"
					},
					{
						"name": "Customer ID",
						"type": "String"
					},
					{
						"name": "Customer Name",
						"type": "String"
					},
					{
						"name": "Segment",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Postal Code",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Product ID",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Sub-Category",
						"type": "String"
					},
					{
						"name": "Product Name",
						"type": "String"
					},
					{
						"name": "Sales",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Discount",
						"type": "String"
					},
					{
						"name": "Profit",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob_inputservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sqldb_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "raw"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Question1"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob_inputservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blob_inputservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_sqldb_properties_typeProperties_server')]",
					"database": "[parameters('ls_sqldb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_sqldb_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_sqldb_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_customerdetails_to_prep')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Question1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "customerdetailsstaging"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "customerdetailsprep"
						}
					],
					"transformations": [
						{
							"name": "RemoveDuplicateCustomers",
							"description": "remove duplicate customer details"
						},
						{
							"name": "FilteringExtraColumn",
							"description": "Email, PhoneNumber, Address, City, State, ZipCode, Country'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          PhoneNumber as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as float,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> customerdetailsstaging",
						"customerdetailsstaging aggregate(groupBy(CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          PhoneNumber,",
						"          Address,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          Country),",
						"     temp = sum(ZipCode)) ~> RemoveDuplicateCustomers",
						"RemoveDuplicateCustomers select(mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email,",
						"          PhoneNumber,",
						"          Address,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FilteringExtraColumn",
						"FilteringExtraColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> customerdetailsprep"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_final_report')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Question1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "CustomerDetailsPrep"
						},
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "OrderDetailsPerp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "GenerateReport"
						}
					],
					"transformations": [
						{
							"name": "Join"
						},
						{
							"name": "Filtering"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          PhoneNumber as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipeCode as double,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CustomerDetailsPrep",
						"source(output(",
						"          OrderID as string,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as string,",
						"          OrderTimestamp as string,",
						"          Price as float,",
						"          CustomerID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OrderDetailsPerp",
						"CustomerDetailsPrep, OrderDetailsPerp join(CustomerDetailsPrep@CustomerID == OrderDetailsPerp@CustomerID,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join",
						"Join select(mapColumn(",
						"          CustomerID = CustomerDetailsPrep@CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          City,",
						"          OrderID,",
						"          ProductID,",
						"          ProductName,",
						"          Quantity,",
						"          OrderTimestamp,",
						"          Price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Filtering",
						"Filtering sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> GenerateReport"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_order_netprice')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "practise"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "OrderDetails",
							"description": "Import data from orderdetails table"
						},
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "Customerdetails",
							"description": "import data from customerdetails table "
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "Sink",
							"description": "Store in new table"
						}
					],
					"transformations": [
						{
							"name": "AddColumn",
							"description": "Add \"net_price\" column to \"orderdetails\" table"
						},
						{
							"name": "JoinTable",
							"description": "Join orderdetails table and customerdetails table using customerid"
						},
						{
							"name": "TotalPurchaseofCustomer",
							"description": "Find the total price spend by the customer"
						},
						{
							"name": "RankingCustomers",
							"description": "Ranking customer based on net spending"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as integer,",
						"          OrderTimestamp as string,",
						"          Price as float,",
						"          CustomerID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OrderDetails",
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          PhoneNumber as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Customerdetails",
						"OrderDetails derive(net_price = Price*Quantity) ~> AddColumn",
						"AddColumn, Customerdetails join(OrderDetails@CustomerID == Customerdetails@CustomerID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTable",
						"JoinTable aggregate(groupBy(CustomerId = Customerdetails@CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          Email),",
						"     total_cost = sum(net_price)) ~> TotalPurchaseofCustomer",
						"TotalPurchaseofCustomer rank(desc(total_cost, true),",
						"     output(Rank as long)) ~> RankingCustomers",
						"RankingCustomers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_orderdetails_to_prep')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Question1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "orderdetailsstaging"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sqldb_table",
								"type": "DatasetReference"
							},
							"name": "orderdetailsprep"
						}
					],
					"transformations": [
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "FilterExtraColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Quantity as string,",
						"          OrderTimestamp as string,",
						"          Price as float,",
						"          CustomerID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> orderdetailsstaging",
						"orderdetailsstaging aggregate(groupBy(OrderID,",
						"          ProductID,",
						"          ProductName,",
						"          Quantity,",
						"          OrderTimestamp,",
						"          Price,",
						"          CustomerID),",
						"     temp = avg(Price)) ~> RemoveDuplicates",
						"RemoveDuplicates select(mapColumn(",
						"          OrderID,",
						"          ProductID,",
						"          ProductName,",
						"          Quantity,",
						"          OrderTimestamp,",
						"          Price,",
						"          CustomerID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FilterExtraColumn",
						"FilterExtraColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> orderdetailsprep"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sqldb_table')]"
			]
		}
	]
}